doctype html
html
    head
        meta(charset="utf-8")
        meta(name="viewport", content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1")
        meta(name="apple-mobile-web-app-capable" content="yes")
        meta(name="apple-mobile-web-app-status-bar-style" content="black")
    title RADIO AF APP #1
    link(rel='stylesheet', href='css/style.css')
    body
      div#loading
        p Loading...
  
      script(src="cordova.js")
      script(src="js/vendor/jquery-2.1.3.min.js")
      script(src="js/vendor/fastclick.js")

      script(src="js/rss.js")
      script(src="js/htmlfarm.js")
      script(src="js/handlers.js")
      script(src="js/titlebar.js")
      script(src="js/scroller.js")
      script(src="js/audiop.js")
      script(src="js/cache.js")
      script(src="js/downloaded.js")

      script(src="js/index.js")
      script.
         app.initialize();
         
         app.onStart = function () {
             app.log('onstart')

            var wrapper = htmlFarm.wrapper(),
                slider = wrapper.slider;

            // TODO: Do DOM shit while we are loading RSS

            // Remove the loading div
            document.body.removeChild(document.getElementById('loading'))

            // Wrapper+slider loaded earlier
            var titleBar = htmlFarm.staticTitleBar(),
                menuButton = htmlFarm.menuButton(),
                player = htmlFarm.player()

            wrapper = wrapper.wrapper;

            wrapper.appendChild(slider)

            // Add the permanent elements, i.e. header + footer
            document.body.appendChild(menuButton)
            document.body.appendChild(titleBar)
            document.body.appendChild(player)

            document.body.appendChild(wrapper)

            FastClick.attach(document.body);

            window.titlebar.init(titleBar);
            app.scroller = new Scroll('#wrapper', 0);

            app.scroller.onScrollListener = window.titlebar.onScroll;
            app.scroller.onPageChangeListener = window.titlebar.onPageChange;

            console.log('Begin cache control')
            window.localStorage.clear()
            
            var cachedPrograms = window.cache.getCachedPrograms(),
                serverProgramList, done = false

            app.programs = {}
            window.dlman.init()

            function doneWithRSS(programKey){
                // flow page maintains special local storage
                //window.flow.checkProgram(programKey)
                console.log('Done with program: ' + programKey)

                if (!serverProgramList) 
                  return;

                if (Object.keys(app.programs).length === serverProgramList.length && !done) {
                    // Okay we've resolved all programs, let's start generating stuff
                    done = true

                    // Add the permanent views to the slider
                    slider.appendChild(htmlFarm.flowPage())
                    slider.appendChild(htmlFarm.favouritesPage())
                    
                    slider.appendChild(htmlFarm.allProgramPage())
                    //slider.appendChild(htmlFarm.downloadedPage())

                    app.scroller.refreshPages()
                    console.log('Done with all!')
                }
            }

            // Load cached programs
            cachedPrograms.forEach(function (programKey){
              console.log('Loading ' + programKey + ' from cache!')
                // Load program object (except podcasts)
                app.programs[programKey] = window.cache.getObject(programKey)

                // Load podcasts array
                app.programs[programKey].podcasts = window.cache.getObject(app.programs[programKey].podcasts)
                
                // Notify the world
                doneWithRSS(programKey)
            })

            function rssDoneLoading(data, xml) {
                console.log('Loaded ' + this.program + ', parsing...')
                // parse returns pre-emptively without durations
                var podcasts = rss.parse(data, xml, withDuration),
                    programKey = this.program

                // Setup links
                app.programs[programKey].podcasts = podcasts

                // Copy duration when done, store in cache
                function withDuration(podcastsWithDur){
                    for (var i = 0, l = podcastsWithDur.length; i < l; i++)
                      podcasts[i].duration = podcastsWithDur[i].duration

                    console.log('Updated all podcast durations (' + programKey + ')')
                    
                    // Cache this json!
                    window.cache.putProgram(app.programs[programKey])
                    doneWithRSS(programKey)
                }

                console.log('Parsed, waiting for duration (' + this.program + ')')
            }

            function mergeRSS(data, xml){
                // TODO: Actually compare fetched vs cached data
                console.log('Merge RSS: ' + this.program)
                // TODO: Should call another method, really
                doneWithRSS(this.program)
            }

            // Fetch the server-side list of program names, images and rss
            // TODO: Use server side instead of local side
            $.getJSON('programs.json', function(data) {
                // data = { 'bestforeigar' : { name : 'walla', image : 'www', rss : 'www' }, ... }
                if (data) {
                    serverProgramList = Object.keys(data)
                    serverProgramList.forEach(function(programKey){
                        data[programKey].key = programKey
                        if (!app.programs[programKey]) {
                            app.programs[programKey] = data[programKey]
                            rss.load(data[programKey].rss, 100, rssDoneLoading.bind({ program : programKey }))
                        } else {
                            rss.load(data[programKey].rss, 100, mergeRSS.bind({ program : programKey }))                        
                        }
                    })
                } else {
                    console.error('no data received')
                }
            })



            // a program in the favourite screen was clicked upon: 
            // THOU SHALT HANDLE IT
            $(".fav").on("click", function() {
                var $el = $(this);
                var programName = $el.data("program");
                rss.find(programName, function(podcasts) {
                    var programPage = window.htmlFarm.programView(podcasts);
                    // insert the page into the dom
                    var newPage = app.scroller.insertPage(programPage, app.scroller.pages[app.scroller.currentPage], false);
                    app.scroller.gotoPage(newPage);
                });

                // var $title = $el.find(".fav-title");
                // if ($title.hasClass("hax")) {
                //     $title.removeClass("hax");
                //     $el.find(".fav-title").css("background-color", "#e05a5a");
                //     $el.find(".fav-title").css("color", "#f2f2f2");
                // } else {
                //     $title.addClass("hax");
                //     $el.find(".fav-title").css("background-color", "#89FB98");
                //     $el.find(".fav-title").css("color", "#DD69AF");
                // }
            });
         }
